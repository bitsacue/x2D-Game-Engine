float SimplexNoise2D::rawNoise(float, float)

Temps: 5, 6, 7, 8, 27, 30, 32

Variables: 
 -001: float x
 -002: float y
 001: float n0
 002: float n1
 003: float n2
 004: float F2
 009: float s
 010: int i
 011: int j
 012: float G2
 013: float t
 014: float X0
 015: float Y0
 016: float x0
 017: float y0
 018: int i1
 019: int j1
 020: float x1
 021: float y1
 022: float x2
 023: float y2
 024: int ii
 025: int jj
 026: int gi0
 028: int gi1
 029: int gi2
 031: float t0
 033: float t1
 034: float t2
 000: SimplexNoise2D this
 027: array {noname}
 032: array {noname}


    0  34 *    VarDecl  0
    0  34 *    VarDecl  1
    0  34 *    PshVPtr  v0
    1  35 *    CALLSYS  2           (void _builtin_object_::_beh_4_())
- 84,3 -
    3  34 *    SUSPEND
- 87,3 -
    4  34 *    VarDecl  2
    4  34 *    VarDecl  3
    4  34 *    VarDecl  4
    4  34 *    SUSPEND
    5  34 *    VarDecl  5
    5  34 *    PshC4    0x40400000          (i:1077936128, f:3)
    7  35 *    CALLSYS  272           (float sqrt(float))
    9  34 *    CpyRtoV4 v6
   10  34 *    SUBIf    v5, v6, 1.000000
   13  34 *    MULIf    v4, v5, 0.500000
- 90,3 -
   16  34 *    SUSPEND
   17  34 *    VarDecl  6
   17  34 *    ADDf     v5, v-1, v-2
   19  34 *    MULf     v9, v5, v4
- 91,3 -
   21  34 *    SUSPEND
   22  34 *    VarDecl  7
   22  34 *    ADDf     v5, v-1, v9
   24  34 *    PshV4    v5
   25  35 *    CALL     457           (int fastfloor(const float))
   27  34 *    CpyRtoV4 v7
   28  34 *    CpyVtoV4 v10, v7
- 92,3 -
   30  34 *    SUSPEND
   31  34 *    VarDecl  8
   31  34 *    ADDf     v8, v-2, v9
   33  34 *    PshV4    v8
   34  35 *    CALL     457           (int fastfloor(const float))
   36  34 *    CpyRtoV4 v7
   37  34 *    CpyVtoV4 v11, v7
- 94,3 -
   39  34 *    SUSPEND
   40  34 *    VarDecl  9
   40  34 *    SetV4    v8, 0x40400000          (i:1077936128, f:3)
   42  34 *    PshC4    0x40400000          (i:1077936128, f:3)
   44  35 *    CALLSYS  272           (float sqrt(float))
   46  34 *    CpyRtoV4 v7
   47  34 *    SUBf     v5, v8, v7
   49  34 *    SetV4    v6, 0x40c00000          (i:1086324736, f:6)
   51  34 *    DIVf     v12, v5, v6
- 95,3 -
   53  34 *    SUSPEND
   54  34 *    VarDecl  10
   54  34 *    ADDi     v6, v10, v11
   56  34 *    iTOf     v6
   57  34 *    MULf     v13, v6, v12
- 97,3 -
   59  34 *    SUSPEND
   60  34 *    VarDecl  11
   60  34 *    CpyVtoV4 v6, v10
   62  34 *    iTOf     v6
   63  34 *    SUBf     v14, v6, v13
- 98,3 -
   65  34 *    SUSPEND
   66  34 *    VarDecl  12
   66  34 *    CpyVtoV4 v6, v11
   68  34 *    iTOf     v6
   69  34 *    SUBf     v15, v6, v13
- 100,3 -
   71  34 *    SUSPEND
   72  34 *    VarDecl  13
   72  34 *    SUBf     v16, v-1, v14
- 101,3 -
   74  34 *    SUSPEND
   75  34 *    VarDecl  14
   75  34 *    SUBf     v17, v-2, v15
- 105,3 -
   77  34 *    SUSPEND
- 106,3 -
   78  34 *    VarDecl  15
   78  34 *    VarDecl  16
   78  34 *    SUSPEND
   79  34 *    CMPf     v16, v17
   81  34 *    JNP      +8              (d:91)
- 106,17 -
   83  34 * {
   83  34 *    SUSPEND
   84  34 *    SetV4    v18, 0x1          (i:1, f:1.4013e-045)
- 106,23 -
   86  34 *    SUSPEND
   87  34 *    SetV4    v19, 0x0          (i:0, f:0)
   89  34 * }
   89  34 *    JMP      +6              (d:97)
- 107,10 -
   91  34 * 1:
   91  34 * {
   91  34 *    SUSPEND
   92  34 *    SetV4    v18, 0x0          (i:0, f:0)
- 107,16 -
   94  34 *    SUSPEND
   95  34 *    SetV4    v19, 0x1          (i:1, f:1.4013e-045)
- 112,3 -
   97  34 * }
   97  34 * 2:
   97  34 *    SUSPEND
   98  34 *    VarDecl  17
   98  34 *    CpyVtoV4 v7, v18
  100  34 *    iTOf     v7
  101  34 *    SUBf     v6, v16, v7
  103  34 *    ADDf     v20, v6, v12
- 113,3 -
  105  34 *    SUSPEND
  106  34 *    VarDecl  18
  106  34 *    CpyVtoV4 v6, v19
  108  34 *    iTOf     v6
  109  34 *    SUBf     v7, v17, v6
  111  34 *    ADDf     v21, v7, v12
- 114,3 -
  113  34 *    SUSPEND
  114  34 *    VarDecl  19
  114  34 *    SUBIf    v6, v16, 1.000000
  117  34 *    MULIf    v5, v12, 2.000000
  120  34 *    ADDf     v22, v6, v5
- 115,3 -
  122  34 *    SUSPEND
  123  34 *    VarDecl  20
  123  34 *    SUBIf    v7, v17, 1.000000
  126  34 *    MULIf    v6, v12, 2.000000
  129  34 *    ADDf     v23, v7, v6
- 118,3 -
  131  34 *    SUSPEND
  132  34 *    VarDecl  21
  132  34 *    SetV4    v6, 0xff          (i:255, f:3.57331e-043)
  134  34 *    BAND     v24, v10, v6
- 119,3 -
  136  34 *    SUSPEND
  137  34 *    VarDecl  22
  137  34 *    SetV4    v6, 0xff          (i:255, f:3.57331e-043)
  139  34 *    BAND     v25, v11, v6
- 120,3 -
  141  34 *    SUSPEND
  142  34 *    VarDecl  23
  142  34 *    PshV4    v25
  143  35 *    PshGPtr  104416840
  145  36 *    CHKREF
  146  36 *    RefCpyV  v27, 104362464
  148  36 *    CALLSYS  412           (int& array::opIndex(uint))
  150  34 *    RDR4     v6
  151  34 *    FREE     v27, 104362464
  153  34 *    ADDi     v5, v24, v6
  155  34 *    PshV4    v5
  156  35 *    PshGPtr  104416840
  158  36 *    CHKREF
  159  36 *    RefCpyV  v27, 104362464
  161  36 *    CALLSYS  412           (int& array::opIndex(uint))
  163  34 *    RDR4     v6
  164  34 *    SetV4    v8, 0xc          (i:12, f:1.68156e-044)
  166  34 *    FREE     v27, 104362464
  168  34 *    MODi     v26, v6, v8
- 121,3 -
  170  34 *    SUSPEND
  171  34 *    VarDecl  24
  171  34 *    ADDi     v7, v24, v18
  173  34 *    ADDi     v5, v25, v19
  175  34 *    PshV4    v5
  176  35 *    PshGPtr  104416840
  178  36 *    CHKREF
  179  36 *    RefCpyV  v27, 104362464
  181  36 *    CALLSYS  412           (int& array::opIndex(uint))
  183  34 *    RDR4     v6
  184  34 *    FREE     v27, 104362464
  186  34 *    ADDi     v5, v7, v6
  188  34 *    PshV4    v5
  189  35 *    PshGPtr  104416840
  191  36 *    CHKREF
  192  36 *    RefCpyV  v27, 104362464
  194  36 *    CALLSYS  412           (int& array::opIndex(uint))
  196  34 *    RDR4     v6
  197  34 *    SetV4    v8, 0xc          (i:12, f:1.68156e-044)
  199  34 *    FREE     v27, 104362464
  201  34 *    MODi     v28, v6, v8
- 122,3 -
  203  34 *    SUSPEND
  204  34 *    VarDecl  25
  204  34 *    ADDIi    v5, v24, 1
  207  34 *    ADDIi    v8, v25, 1
  210  34 *    PshV4    v8
  211  35 *    PshGPtr  104416840
  213  36 *    CHKREF
  214  36 *    RefCpyV  v27, 104362464
  216  36 *    CALLSYS  412           (int& array::opIndex(uint))
  218  34 *    RDR4     v6
  219  34 *    FREE     v27, 104362464
  221  34 *    ADDi     v8, v5, v6
  223  34 *    PshV4    v8
  224  35 *    PshGPtr  104416840
  226  36 *    CHKREF
  227  36 *    RefCpyV  v27, 104362464
  229  36 *    CALLSYS  412           (int& array::opIndex(uint))
  231  34 *    RDR4     v6
  232  34 *    SetV4    v30, 0xc          (i:12, f:1.68156e-044)
  234  34 *    FREE     v27, 104362464
  236  34 *    MODi     v29, v6, v30
- 125,3 -
  238  34 *    SUSPEND
  239  34 *    VarDecl  26
  239  34 *    SetV4    v8, 0x3f000000          (i:1056964608, f:0.5)
  241  34 *    MULf     v7, v16, v16
  243  34 *    SUBf     v30, v8, v7
  245  34 *    MULf     v7, v17, v17
  247  34 *    SUBf     v31, v30, v7
- 126,3 -
  249  34 *    SUSPEND
  250  34 *    CMPIf    v31, 0.000000
  252  34 *    JNS      +5              (d:259)
- 127,4 -
  254  34 * {
  254  34 *    SUSPEND
  255  34 *    SetV4    v1, 0x0          (i:0, f:0)
  257  34 * }
  257  34 *    JMP      +33              (d:292)
- 129,4 -
  259  34 * 3:
  259  34 * {
  259  34 *    SUSPEND
  260  34 *    MULf     v31, v31, v31
- 130,4 -
  262  34 *    SUSPEND
  263  34 *    MULf     v7, v31, v31
  265  34 *    PshV4    v17
  266  35 *    PshV4    v16
  267  36 *    PshV4    v26
  268  37 *    PshGPtr  104416256
  270  38 *    CHKREF
  271  38 *    RefCpyV  v32, 104407568
  273  38 *    CALLSYS  462           (int[]& array::opIndex(uint))
  275  36 *    PshRPtr
  276  37 *    CALL     408           (int[]@ factstub())
  278  37 *    STOREOBJ v27
  279  37 *    PshVPtr  v27
  280  38 *    CALLSYS  80           (T[]& array::opAssign(const T[]&in))
  282  36 *    FREE     v32, 104407568
  284  36 *    VAR      v27
  285  37 *    PshVPtr  v0
  286  38 *    GETOBJ   1
  287  38 *    CALLINTF 513           (float SimplexNoise2D::dot(const int[], const float, const float))
  289  34 *    CpyRtoV4 v30
  290  34 *    MULf     v1, v7, v30
- 133,3 -
  292  34 * }
  292  34 * 4:
  292  34 *    SUSPEND
  293  34 *    VarDecl  27
  293  34 *    SetV4    v8, 0x3f000000          (i:1056964608, f:0.5)
  295  34 *    MULf     v30, v20, v20
  297  34 *    SUBf     v7, v8, v30
  299  34 *    MULf     v30, v21, v21
  301  34 *    SUBf     v33, v7, v30
- 134,3 -
  303  34 *    SUSPEND
  304  34 *    CMPIf    v33, 0.000000
  306  34 *    JNS      +5              (d:313)
- 135,4 -
  308  34 * {
  308  34 *    SUSPEND
  309  34 *    SetV4    v2, 0x0          (i:0, f:0)
  311  34 * }
  311  34 *    JMP      +33              (d:346)
- 137,4 -
  313  34 * 5:
  313  34 * {
  313  34 *    SUSPEND
  314  34 *    MULf     v33, v33, v33
- 138,4 -
  316  34 *    SUSPEND
  317  34 *    MULf     v30, v33, v33
  319  34 *    PshV4    v21
  320  35 *    PshV4    v20
  321  36 *    PshV4    v28
  322  37 *    PshGPtr  104416256
  324  38 *    CHKREF
  325  38 *    RefCpyV  v32, 104407568
  327  38 *    CALLSYS  462           (int[]& array::opIndex(uint))
  329  36 *    PshRPtr
  330  37 *    CALL     408           (int[]@ factstub())
  332  37 *    STOREOBJ v27
  333  37 *    PshVPtr  v27
  334  38 *    CALLSYS  80           (T[]& array::opAssign(const T[]&in))
  336  36 *    FREE     v32, 104407568
  338  36 *    VAR      v27
  339  37 *    PshVPtr  v0
  340  38 *    GETOBJ   1
  341  38 *    CALLINTF 513           (float SimplexNoise2D::dot(const int[], const float, const float))
  343  34 *    CpyRtoV4 v7
  344  34 *    MULf     v2, v30, v7
- 141,3 -
  346  34 * }
  346  34 * 6:
  346  34 *    SUSPEND
  347  34 *    VarDecl  28
  347  34 *    SetV4    v8, 0x3f000000          (i:1056964608, f:0.5)
  349  34 *    MULf     v7, v22, v22
  351  34 *    SUBf     v30, v8, v7
  353  34 *    MULf     v7, v23, v23
  355  34 *    SUBf     v34, v30, v7
- 142,3 -
  357  34 *    SUSPEND
  358  34 *    CMPIf    v34, 0.000000
  360  34 *    JNS      +5              (d:367)
- 143,4 -
  362  34 * {
  362  34 *    SUSPEND
  363  34 *    SetV4    v3, 0x0          (i:0, f:0)
  365  34 * }
  365  34 *    JMP      +33              (d:400)
- 145,4 -
  367  34 * 7:
  367  34 * {
  367  34 *    SUSPEND
  368  34 *    MULf     v34, v34, v34
- 146,4 -
  370  34 *    SUSPEND
  371  34 *    MULf     v7, v34, v34
  373  34 *    PshV4    v23
  374  35 *    PshV4    v22
  375  36 *    PshV4    v29
  376  37 *    PshGPtr  104416256
  378  38 *    CHKREF
  379  38 *    RefCpyV  v32, 104407568
  381  38 *    CALLSYS  462           (int[]& array::opIndex(uint))
  383  36 *    PshRPtr
  384  37 *    CALL     408           (int[]@ factstub())
  386  37 *    STOREOBJ v27
  387  37 *    PshVPtr  v27
  388  38 *    CALLSYS  80           (T[]& array::opAssign(const T[]&in))
  390  36 *    FREE     v32, 104407568
  392  36 *    VAR      v27
  393  37 *    PshVPtr  v0
  394  38 *    GETOBJ   1
  395  38 *    CALLINTF 513           (float SimplexNoise2D::dot(const int[], const float, const float))
  397  34 *    CpyRtoV4 v30
  398  34 *    MULf     v3, v7, v30
- 151,3 -
  400  34 * }
  400  34 * 8:
  400  34 *    SUSPEND
  401  34 *    ADDf     v30, v1, v2
  403  34 *    ADDf     v8, v30, v3
  405  34 *    MULIf    v30, v8, 70.000000
  408  34 * {
  408  34 * }
  408  34 *    CpyVtoR4 v30
  409  34 * 0:
  409  34 *    FREE     v0, 104326016
  411  34 *    RET      3
